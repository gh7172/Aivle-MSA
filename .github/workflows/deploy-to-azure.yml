name: Deploy to Azure AKS using Manifests

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: "project09"          
  RESOURCE_GROUP: "project09-rsrcgrp"        
  CLUSTER_NAME: "project09-aks"                
  
jobs:
  build-and-push:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [
          "author", "books", "gateway", "generation", 
          "point", "purchase", "read", "subscription", 
          "user", "usercenter", "write"
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build Maven Project for ${{ matrix.service }}
        run: |
          echo "Building ${{ matrix.service }} service..."
          mvn clean package -f ./${{ matrix.service }}/pom.xml -DskipTests

      - name: Build and push ${{ matrix.service }} to ACR
        run: |
          az acr build \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/aivle-msa/${{ matrix.service }}:${{ github.sha }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/aivle-msa/${{ matrix.service }}:latest \
            --registry ${{ env.AZURE_CONTAINER_REGISTRY }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            ./${{ matrix.service }}

  build-frontend:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install dependencies and build
        run: |
          cd frontend
          npm ci
          CI=false npm run build

      - name: Create Frontend Deployment Manifest
        run: |
          mkdir -p frontend/kubernetes
          cat > frontend/kubernetes/deployment.yaml << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: frontend
            labels:
              app: frontend
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: frontend
            template:
              metadata:
                labels:
                  app: frontend
              spec:
                containers:
                - name: frontend
                  image: "${AZURE_CONTAINER_REGISTRY}.azurecr.io/aivle-msa/frontend:${GITHUB_SHA}"
                  ports:
                  - containerPort: 80
          EOF
          
          # 환경변수 치환
          envsubst < frontend/kubernetes/deployment.yaml > frontend/kubernetes/deployment.yaml.tmp
          mv frontend/kubernetes/deployment.yaml.tmp frontend/kubernetes/deployment.yaml

      - name: Create Frontend Service Manifest
        run: |
          cat > frontend/kubernetes/service.yaml << 'EOF'
          apiVersion: v1
          kind: Service
          metadata:
            name: frontend
            labels:
              app: frontend
          spec:
            type: LoadBalancer
            ports:
            - port: 80
              targetPort: 80
            selector:
              app: frontend
          EOF

      - name: Create Frontend Dockerfile
        run: |
          cd frontend
          cat > Dockerfile << 'EOF'
          FROM nginx:alpine
          COPY dist/ /usr/share/nginx/html/
          COPY nginx.conf /etc/nginx/nginx.conf
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOF

      - name: Create Nginx config
        run: |
          cd frontend
          cat > nginx.conf << 'EOF'
          events {
              worker_connections 1024;
          }
          http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;
              
              server {
                  listen 80;
                  server_name localhost;
                  
                  location / {
                      root /usr/share/nginx/html;
                      index index.html index.htm;
                      try_files $uri $uri/ /index.html;
                  }
                  
                  location /api/ {
                      proxy_pass http://gateway:8080/;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                  }
              }
          }
          EOF

      - name: Build and push Frontend to ACR
        run: |
          az acr build \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/aivle-msa/frontend:${{ github.sha }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/aivle-msa/frontend:latest \
            --registry ${{ env.AZURE_CONTAINER_REGISTRY }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            ./frontend

  deploy-infrastructure:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: [build-and-push, build-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      - name: Create Infrastructure Manifests
        run: |
          mkdir -p infrastructure/kafka
          cat > infrastructure/kafka/deployment.yaml << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: kafka
            labels:
              app: kafka
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: kafka
            template:
              metadata:
                labels:
                  app: kafka
              spec:
                containers:
                - name: kafka
                  image: confluentinc/cp-kafka:latest
                  ports:
                  - containerPort: 9092
                  env:
                  - name: KAFKA_BROKER_ID
                    value: "1"
                  - name: KAFKA_ZOOKEEPER_CONNECT
                    value: "zookeeper:2181"
                  - name: KAFKA_ADVERTISED_LISTENERS
                    value: "PLAINTEXT://kafka:9092"
                  - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
                    value: "1"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: kafka
            labels:
              app: kafka
          spec:
            ports:
            - port: 9092
              targetPort: 9092
            selector:
              app: kafka
          EOF

      - name: Deploy Infrastructure
        run: |
          kubectl apply -f infrastructure/kafka/deployment.yaml

  deploy-services:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    
    strategy:
      matrix:
        service: [
          "gateway", "author", "books", "generation", 
          "point", "purchase", "read", "subscription", 
          "user", "usercenter", "write", "frontend"
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      - name: Update image in ${{ matrix.service }} deployment manifest
        run: |
          if [ -f "${{ matrix.service }}/kubernetes/deployment.yaml" ]; then
            # 이미지 태그를 현재 commit SHA로 업데이트
            sed -i 's|:latest|:${{ github.sha }}|g' ${{ matrix.service }}/kubernetes/deployment.yaml
            
            echo "Updated manifest:"
            cat ${{ matrix.service }}/kubernetes/deployment.yaml
          fi

      - name: Deploy ${{ matrix.service }} using manifests
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: |
            ${{ matrix.service }}/kubernetes/deployment.yaml
            ${{ matrix.service }}/kubernetes/service.yaml
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/aivle-msa/${{ matrix.service }}:${{ github.sha }}

      - name: Wait for ${{ matrix.service }} deployment
        run: |
          kubectl rollout status deployment/${{ matrix.service }} --timeout=300s

  get-service-info:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: [deploy-services]
    
    steps:
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      - name: Get service information
        run: |
          echo "🚀 Deployment completed! Service information:"
          echo "=============================================="
          kubectl get all -o wide
          echo ""
          echo "📋 Services:"
          kubectl get services
          echo ""
          echo "🌐 LoadBalancer Services:"
          kubectl get services --field-selector spec.type=LoadBalancer 